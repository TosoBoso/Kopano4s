#!/bin/sh
# ** (c) 2018 vbettag - install for Kopano4s in Docker container

# get common and config
. "$(dirname $0)"/common
. "$ETC_PATH"/package.cfg

# set sudo for DSM 6 as root login is no longer possible
MAJOR_VERSION=`grep majorversion /etc.defaults/VERSION | grep -o [0-9]`
LOGIN=`whoami`
if [ $MAJOR_VERSION -gt 5 ] && [ $LOGIN != "root" ]
then
	echo "Switching in sudo mode. You may need to provide root password at initial call.."
	SUDO="sudo"
else
	SUDO=""
fi

case "$1" in
	start)
		# enable 3rdparty admin ui and web icons and remove the cycle softlink
		$SUDO ln -sf $TARGET_PATH/ui $UI_PATH
		if [ -e $TARGET_PATH/ui/ui ] ; then $SUDO rm $TARGET_PATH/ui/ui ; fi
		# update certificates from synology into container if out of sync
		SYNC_K_CERTIFICATE
		# do not start in active slave mode as it breaks replication
		if [ "$K_REPLICATION" == "SLAVE" ] && ( $SUDO kopano4s-replication | grep -q "running" )
		then
			MSG="Refuse Kopano start: slave replication running do kopano4s-replication stop first"
			# write warning to log once and only if root as it is for gui part
			if [ "$SUDO" != "sudo" ] && !(grep -q "$MSG" $LOG)
			then
				LOG_MESSAGE "Warning $MSG"
			fi
			echo $MSG
			if [ $NOTIFY -gt 0 ]
			then
				/usr/syno/bin/synodsmnotify $NOTIFYTARGET Kopano "$MSG"
			fi
			exit 1
		fi
		if [ -e $ETC_PATH/kopano/mount.issue ]
		then
			$SUDO rm $ETC_PATH/kopano/mount.issue
			$SUDO docker rm kopano4s
		fi
		if $SUDO docker ps | grep -q kopano4s
		then
			echo "Kopano4s already running"
		else
			# exception to recreate the container?
			if !($SUDO docker ps -a | grep -q kopano4s)
			then
				MSG="Rebuilding Kopano docker container (~15-30s)"
				if [ -n $SUDO ]
				then
					echo "$MSG .."
				else
					LOG_MESSAGE "Warning $MSG"
				fi
				SET_DOCKER_ENV
				if !($SUDO docker run $DOCKER_PARAMS $DOCKER_MOUNTS $DOCKER_PORTS $DOCKER_IMAGE)
				then
					echo "failed to rebuild Kopano"
					exit 1
				fi
				# init phase docker post build
				INIT_DOCKER
			# normal restart
			else
				if !($SUDO docker start kopano4s)
				then
					echo "failed to start Kopano"
					exit 1
				fi
			fi
		fi
		# check for warnings of non critical services not running 
		RET=`$SUDO docker exec -it kopano4s /usr/local/bin/init.sh status`
		if !(echo $RET | grep -q "Running:")
		then
			# write warning to log once and only if root as it is for gui part
			if [ "$SUDO" != "sudo" ] && !(grep -q "$RET" $LOG)
			then
				LOG_MESSAGE "Warning $RET"
			fi
		fi
		echo "Kopano services started"
		exit 0
		# expose Kopano pipe from container to localhost
		#$SUDO ln -sf /var/packages/Kopano4s/target/run/kopano /var/run/kopano
		echo "Kopano services started"
		exit 0
		;;
	stop)
		# disable admin and web icons
		if [ -e $UI_PATH ] ; then $SUDO rm $UI_PATH ; fi
		# stop services and sleep 10s for graceful shutdown (container waits 15s)
		echo -e "\n" | $SUDO docker exec -i kopano4s init.sh stop
		sleep 10
		$SUDO docker stop kopano4s
		echo "Kopano services stopped"
		exit 0
		;;
	status)
		if !($SUDO docker ps | grep -q kopano4s)
		then
			echo "Kopano services not running exit false"
			exit 1
		fi
		RET=`$SUDO docker exec -it kopano4s /usr/local/bin/init.sh status`
		echo "$RET"
		exit 0
		;;
	log)
		LOGFILE="$TARGET_PATH/log/collect.log"
		echo "$TARGET_PATH/log/package.log" > $LOGFILE
		tail -n 20 $TARGET_PATH/log/kopano/package.log  >> $LOGFILE
		echo "------------------------------------------"  >> $LOGFILE
		echo "$TARGET_PATH/log/kopano/server.log" >> $LOGFILE
		tail -n 20 $TARGET_PATH/log/kopano/server.log  >> $LOGFILE
		echo "------------------------------------------"  >> $LOGFILE
		echo "$TARGET_PATH/log/kopano/dagent.log" >> $LOGFILE
		tail -n 20 $TARGET_PATH/log/kopano/dagent.log  >> $LOGFILE
		echo "------------------------------------------"  >> $LOGFILE
		echo "$TARGET_PATH/log/kopano/z-push.log" >> $LOGFILE
		tail -n 20 $TARGET_PATH/log/kopano/z-push.log  >> $LOGFILE
		echo "------------------------------------------"  >> $LOGFILE
		echo "$TARGET_PATH/log/kopano/z-push-error.log" >> $LOGFILE
		tail -n 20 $TARGET_PATH/log/kopano/z-push-error.log  >> $LOGFILE
		echo "------------------------------------------"  >> $LOGFILE
		echo "$TARGET_PATH/log/kopano/gateway.log" >> $LOGFILE
		tail -n 20 $TARGET_PATH/log/kopano/gateway.log  >> $LOGFILE
		echo "------------------------------------------"  >> $LOGFILE
		echo "$TARGET_PATH/log/kopano/ical.log" >> $LOGFILE
		tail -n 20 $TARGET_PATH/log/kopano/ical.log  >> $LOGFILE
		echo "------------------------------------------"  >> $LOGFILE
		echo "$TARGET_PATH/log/kopano/search.log" >> $LOGFILE
		tail -n 20 $TARGET_PATH/log/kopano/search.log  >> $LOGFILE
		echo "------------------------------------------"  >> $LOGFILE
		if [ -e "$TARGET_PATH/log/kopano/licensed.log" ]
		then
			echo "$TARGET_PATH/log/kopano/licensed.log" >> $LOGFILE
			tail -n 20 $TARGET_PATH/log/kopano/licensed.log  >> $LOGFILE
			echo "------------------------------------------"  >> $LOGFILE
		fi
		if [ -e "$TARGET_PATH/log/docker-kopano-build.log" ]
		then
			echo "$TARGET_PATH/log/docker-kopano-build.log" >> $LOGFILE
			cat $TARGET_PATH/log/docker-kopano-build.log  >> $LOGFILE
		fi
		echo $LOGFILE
		exit 0
		;;
	*)
		echo "Usage: command plus status, start, stop"
		exit 1
		;;
esac
